# IMPORTANT: This file was generated by Cucumber 0.4.0
# Edit at your own peril - it's recommended to regenerate this file
# in the future when you upgrade to a newer version of Cucumber.
# Consider adding your own code to a new file instead of editing this one.

# Sets up the Rails environment for Cucumber
ENV["RAILS_ENV"] ||= "development"
require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')
require 'cucumber/rails/world'

# If you set this to true, each scenario will run in a database transaction.
# You can still turn off transactions on a per-scenario basis, simply tagging 
# a feature or scenario with the @no-txn tag. 
#
# If you set this to false, transactions will be off for all scenarios,
# regardless of whether you use @no-txn or not.
#
# Beware that turning transactions off will leave data in your database 
# after each scenario, which can lead to hard-to-debug failures in 
# subsequent scenarios. If you do this, we recommend you create a Before
# block that will explicitly put your database in a known state.
Cucumber::Rails::World.use_transactional_fixtures = false

# If you set this to false, any error raised from within your app will bubble 
# up to your step definition and out to cucumber unless you catch it somewhere
# on the way. You can make Rails rescue errors and render error pages on a
# per-scenario basis by tagging a scenario or feature with the @allow-rescue tag.
#
# If you set this to true, Rails will rescue all errors and render error
# pages, more or less in the same way your application would behave in the
# default production environment. It's not recommended to do this for all
# of your scenarios, as this makes it hard to discover errors in your application.
ActionController::Base.allow_rescue = false

require 'cucumber'
# Comment out the next line if you don't want Cucumber Unicode support
require 'cucumber/formatter/unicode'
#require 'cucumber/webrat/element_locator' # Lets you do table.diff!(element_at('#my_table_or_dl_or_ul_or_ol').to_table)
require 'cucumber/rails/rspec'

#require 'webrat'
#require 'webrat/core/matchers' 
#Webrat.configure do |config|
#  config.mode = :rails
#  config.open_error_files = false # Set to true if you want error pages to pop up in the browser
#end

def watir_wait_for_ajax_object(kind, *args) 
    no_of_tries = 0
    begin
         element = $browser.__send__(kind, *args)
        if element.respond_to?(:assert_exists)
          # IE
          element.assert_exists
          true
        else
          # Safari
          element.exists?
        end
    rescue ::Watir::Exception::UnknownObjectException => e
        no_of_tries += 1
        debug_log "no_of_tries= #{no_of_tries}" if no_of_tries > 10
        sleep 0.2 #Just sleep a little bit and give time
        retry if no_of_tries < 30
        raise
    end
end

def watir_wait_for_ajax_object_to_disappear(kind, *args)
    no_of_tries = 0
    begin
      element = $browser.__send__(kind, *args)
      if element.respond_to?(:assert_exists)
        begin
          element.assert_exists
        rescue
          return true
        end
        sleep 0.2
        no_of_tries += 1
      else
        return true
      end
    end while no_of_tries < 30
    #raise "Object should have disappeared but still exists"
    return true
end

class Object

    @@encrypted_account_nums_cache = {}    
    def encrypt_for_watir
        unless @@encrypted_account_nums_cache.key?(self)
                out = ''
                window_url =  Spec::Ui::ScreenshotFormatter.instance.browser.instance_variable_get(:@window_url)
                if window_url =~ /:8080\//
                    cmd = "jruby -I #{File.expand_path(File.dirname(__FILE__) + "/../vendor/gems/jopenssl/lib")} "+ 
                                        " #{File.expand_path(File.dirname(__FILE__) + "/../crypt.rb")} #{self.dup} 2>/dev/null"    
                    out = `#{cmd}`
                else
                    out = `ruby #{File.expand_path(File.dirname(__FILE__) + "/../crypt.rb")} #{self.dup} 2>/dev/null`
                end
                @@encrypted_account_nums_cache[self] = out.chomp
        end
        @@encrypted_account_nums_cache[self]
    end
end

